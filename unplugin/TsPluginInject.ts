/** 基于@rollup/plugin-inject基础上，封装了下，可以生成TypeScript类型文件  */
import inject, { RollupInjectOptions } from "@rollup/plugin-inject";
import path from "path";
import fs from "fs";

type UserOptions = Pick<
  RollupInjectOptions,
  "modules" | "include" | "exclude"
> & {
  dts?: boolean | string;
};

// src/core/dts.ts 生成 xxx.d.ts 文件
function generateDeclaration(imports: any) {
  const body = [...Object.entries(imports)]
    .sort((a, b) => a[0].localeCompare(b[0]))
    .map(
      ([name, info]) =>
        `  const ${name}: typeof import('${info[0]}')${
          info[1] !== "*" ? `['${info[1] || name}']` : ""
        }`
    )
    .join("\n");
  return `// Generated by 'ts-plugin-inject'
// We suggest you to commit this file into source control
declare global {
${body}
}
export {}
`;
}

// 通过项目中是否有tsconfig.json来判断是否是TypeScript环境
let isTypeScriptEnv = false;
let files = fs.readdirSync(path.resolve());
if (files) {
  isTypeScriptEnv = files.includes("tsconfig.json");
}

const SecondPlugin = function (options: UserOptions) {
  // TypeScript环境下默认是true
  options.dts = options.dts ?? isTypeScriptEnv;
  let dts = !options.dts
    ? false
    : options.dts === true
    ? path.resolve.call(void 0, "customGlogal.d.ts")
    : path.resolve.call(void 0, `${options.dts}.d.ts`);
  if (dts) {
    // 生成 d.ts 文件
    fs.promises.writeFile(dts, generateDeclaration(options.modules), "utf-8");
  }

  let plugin = inject.call(void 0, options);

  plugin.name = "ts-plugin-inject";

  return plugin;
};

export default SecondPlugin;
